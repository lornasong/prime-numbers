/*
	 * calculateStop(max)
	 * returns the squareroot of the user's int (max) (ceiling). calculation for prime stops
	 * once exceed the squareroot of user int
	 *	call this in constructor
	 * 
	 * private createBitSet()
	 * fill an 'array' from 0 to max-2. False default. (True means it is a multiple of a prime.)
	 * 
	 * 
	 * findNextPrimeIndex(bitset)
	 * scans bitset starting from index 0 (int 2) and identifies the first 'false' which is
	 * the next prime number. adds prime number to ArrayList. returns index of the next prime number
	 * 
	 * 
	 * fillInPrimeMultiples(array, primeIndex)
	 * set primeIndex to be true
	 * loops through the multiples of prime and sets those indexes to also be true
	 * 
	 * private boolean recursiveSieve(array, primeIndex)
	 * (call this in constructor as recursive(findNextPrimeIndex())) start at two
	 * if (primeIndex + 2 > stop)
	 *  return false;
	 * else
	 * 	fillInPrimeMultiples(primeIndex);
	 *  nextPrimeIndex = findNextPrimeIndex();
	 *  return recursiveSieve(nextPrimeIndex);
	 *  
	 * addRemainingPrimes(bitset)
	 * scan through remaining bitset and any Falses can be assumed to be primes. add them to the array
	 * for loop
	 */